#!/usr/bin/env node
import{createRequire as e}from"module";import{resolve as n}from"path";import o from"chalk";import r from"minimist";import{isSymlinkAvailable as t,mklnks as i}from"#main";const{gray:s,red:a}=o;const c=e(import.meta.url);const{name:l,version:f}=c("#@");const u=`\n${l} v${f}\nCreate links as configured.\n\nUSAGE:\n    $ ${l} [FLAGS]\n\nFLAGS:\n    -a, --available         Check if symlinks are available (for Windows).\n\n    -c, --config <FILE>     Run with isolated config file (*.{json|js|cjs|mjs}).\n\n    -d, --dry-run           Run trial execution without actual link creation.\n                            (Override \`Options.dryRun\` to \`true\`.)\n\n    -f, --force             Force to remove existing files/directories in the link path.\n                            (Override \`Options.force\` to \`true\`.)\n\n    -h, --help              Display this message.\n\n    -q, --quiet             NOT to display logs.\n                            (Override \`Options.quiet\` to \`true\`.)\n\n    -s, --silent            NOT to display logs & warnings.\n                            (Override \`Options.silent\` to \`true\`.)\n\n    -v, --version           Display version number.\n\nBy default, load "${l}" field in \`package.json\` as configurations.\n`.trim();const d=Object.freeze({a:"available",c:"config",d:"dry-run",f:"force",h:"help",q:"quiet",s:"silent",v:"version"});const p=r(process.argv.slice(2),{alias:d,boolean:Object.keys(d).filter((e=>e!=="c")),string:["c"]});const g=new Set(Object.entries(d).flat()).add("_").add("--");const m=Object.keys(p).filter((e=>!g.has(e)));await(async()=>{const e={};if(0<m.length){console.error(a("Unknown flags:",m.join()));console.error(s(`Enter \`${l} --help\``));return process.exit(1)}else if(p.h){return console.log(u)}else if(p.v){return console.log(f)}else if(p.a){return console.log("Symlink available:",await t())}else if("c"in p){const n=p.c;if(!n){console.error(a("No config file specified."));console.error(s(`Enter \`${l} --help\``));return process.exit(1)}try{Object.assign(e,await h(n))}catch(e){console.error(a("Failed to load config:",n));return process.exit(1)}}else{try{const o=c(n("package.json"));Object.assign(e,o[l])}catch(e){console.error(a("Failed to load config:","./package.json"));return process.exit(1)}}p.d&&(e.dryRun=true);p.f&&(e.force=true);p.q&&(e.quiet=true);p.s&&(e.silent=true);try{await i(e)}catch(e){console.error(a(e));process.exit(1)}})();async function h(e){e=n(e);if(e.endsWith("js")){const n=await import(e);return n.default}else{return c(e)}}
//# sourceMappingURL=cli.mjs.map
