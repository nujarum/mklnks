{"version":3,"file":"main.js","sources":["../src/main.ts"],"sourcesContent":["import type { RmOptions } from 'fs';\nimport type { WorkerOptions } from 'worker_threads';\n\nimport { once } from 'events';\nimport { rm, symlink } from 'fs/promises';\nimport { cpus, tmpdir } from 'os';\nimport { join, resolve } from 'path';\nimport { fileURLToPath } from 'url';\nimport { Worker } from 'worker_threads';\nimport { importMetaResolve } from 'resolve-esm';\nimport chalk from 'chalk';\nconst { gray } = chalk;\n\nconst getWorkerUrl = importMetaResolve('#worker'); // import.meta.resolve('#worker');\nconst isWindows = process.platform === 'win32';\nconst symlinkAvailable = availableSymlink();\n\nconst cpuCount = cpus().length;\nconst execArgv = Object.freeze([\n    '--experimental-import-meta-resolve',\n]);\nconst workerPath = fileURLToPath(await getWorkerUrl);\n\n/** @internal */\nexport interface LinkInfoInit {\n    dryRun?: boolean;\n    linkPath: string;\n    targetPath: string;\n    type: LinkType;\n}\n\n/** @internal */\nexport const enum LinkType {\n    NONE            = 0b00000000,\n    DIR_LINK        = 0b00000001,\n    FILE_LINK       = 0b00000010,\n    SYMLINK         = 0b00000100,\n    JUNCTION        = 0b00001000,\n    SOFTLINK        = SYMLINK | JUNCTION,\n    HARDLINK        = 0b00010000,\n    SYMLINK_DIR     = SYMLINK | DIR_LINK,\n    SYMLINK_FILE    = SYMLINK | FILE_LINK,\n    JUNCTION_DIR    = JUNCTION | DIR_LINK,\n    HARDLINK_FILE   = HARDLINK | FILE_LINK,\n}\n\n/** @internal */\nexport interface WorkerData {\n    readonly dryRun?: boolean | undefined;\n    readonly force?: boolean | undefined;\n    readonly preferSymlink?: boolean | undefined;\n    readonly quiet?: boolean | undefined;\n    readonly silent?: boolean | undefined;\n}\n\nexport interface LinkInfo {\n    /** `true` if run with `Options.dryRun: true` */\n    readonly dryRun?: boolean;\n    /** `true` if any link has created. `false` if otherwise (e.g. `linkPath` & `targetPath` refer to same location). */\n    readonly isAnyLink: boolean;\n    /** `true` if the link created is directory link. */\n    readonly isDirLink: boolean;\n    /** `true` if the link created is file link. */\n    readonly isFileLink: boolean;\n    /** `true` if the link created is hard-link. */\n    readonly isHardLink: boolean;\n    /** `true` if the link created is junction. */\n    readonly isJunction: boolean;\n    /** `true` if the link created is soft-link (junction or symlink). */\n    readonly isSoftLink: boolean;\n    /** `true` if the link created is symlink. */\n    readonly isSymLink: boolean;\n    /** The path of link source. */\n    readonly linkPath: string;\n    /** The path of link tareget. */\n    readonly targetPath: string;\n}\n\nexport interface Options {\n    /**\n     * Base path for resolving paths.\n     * @defaultValue `\".\"` (== [`process.cwd()`](https://nodejs.org/dist/latest-v16.x/docs/api/process.html#processcwd))\n     */\n    baseDir?: string;\n    /**\n     * Run trial execution without actual link creation.\n     * @defaultValue `false`\n     */\n    dryRun?: boolean;\n    /**\n     * An object mapping link path to target path.\n     *\n     * Supported link formats:\n     * * absolute/relative path\n     *\n     * Supported target formats:\n     * * absolute/relative path\n     * * `import:<id>` (resolve by [`import.meta.resolve`](https://nodejs.org/dist/latest-v16.x/docs/api/esm.html#importmetaresolvespecifier-parent))\n     * * `require:<id>` (resolve by [`require.resolve`](https://nodejs.org/dist/latest-v16.x/docs/api/modules.html#requireresolverequest-options))\n     */\n    entries: Record</* link */ string, /* target */ string>;\n    /**\n     * Force to remove existing files/directories in the link path.\n     * @defaultValue `false`\n     */\n    force?: boolean;\n    /**\n     * **(Windows only)**\n     *\n     * Create links with junctions/hard-links instead of symlinks.\n     * @defaultValue `false`\n     */\n    noSymlink?: boolean;\n    /**\n     * **Not** to display logs.\n     * @defaultValue The value of {@linkcode silent}\n     */\n    quiet?: boolean;\n    /**\n     * **Not** to display logs & warnings.\n     * @defaultValue `false`\n     */\n    silent?: boolean;\n}\n\nclass _LinkInfo implements LinkInfo {\n    constructor(init: LinkInfoInit) {\n        const properties: PropertyDescriptorMap = Object.getOwnPropertyDescriptors(init);\n        Object.values(properties).forEach(p => p.writable = false);\n        Object.defineProperties(this, properties);\n    }\n    get [Symbol.toStringTag]() { return 'LinkInfo' as const; }\n    get isAnyLink()     { return LinkType.NONE < this.type; }\n    get isDirLink()     { return !!(this.type & LinkType.DIR_LINK); }\n    get isFileLink()    { return !!(this.type & LinkType.FILE_LINK); }\n    get isHardLink()    { return !!(this.type & LinkType.HARDLINK); }\n    get isJunction()    { return !!(this.type & LinkType.JUNCTION); }\n    get isSoftLink()    { return !!(this.type & LinkType.SOFTLINK); }\n    get isSymLink()     { return !!(this.type & LinkType.SYMLINK); }\n}\ninterface _LinkInfo extends Readonly<LinkInfoInit> { // eslint-disable-line @typescript-eslint/no-empty-interface\n}\n\nexport function isSymlinkAvailable() {\n    return symlinkAvailable;\n}\n\nexport async function mklnks(options: Options) {\n    const cwd = process.cwd();\n    options = { ...options };\n    options.noSymlink &&= isWindows;\n    options.quiet     ||= options.silent!;\n    const {\n        baseDir = '.',\n        dryRun,\n        entries = {},\n        force,\n        noSymlink,\n        quiet,\n        silent,\n    } = options;\n\n    const workers: Worker[] = [];\n    try {\n        process.chdir(baseDir);\n\n        const entryMap = listEntries(entries);\n        const { size } = entryMap;\n        if (size < 1) {\n            quiet || console.log(gray('No valid entries.'));\n            return [];\n        }\n        {\n            const n = workers.length = Math.min(cpuCount, size);\n            const preferSymlink = !noSymlink && await symlinkAvailable;\n            const workerData: WorkerData = { dryRun, force, preferSymlink, quiet, silent };\n            const workerOptions = { execArgv, workerData } as WorkerOptions;\n            for (let i = 0; i < n; workers[i++] = new Worker(workerPath, workerOptions));\n        }\n        const entryList: (readonly [string, string])[] = [...entryMap];\n        const resultMap = new Map(entryList.map(([linkPath]) => [linkPath, null! as LinkInfo]));\n        const run = exec.bind(null, entryList.reverse(), resultMap);\n\n        await Promise.all(workers.map(run));\n\n        return [...resultMap.values()];\n\n    } finally {\n        workers.forEach(w => void w.terminate());\n        process.chdir(cwd);\n    }\n}\n\nasync function availableSymlink() {\n    if (!isWindows) {\n        return true;\n    }\n    const rmOptions: RmOptions = { force: true, recursive: true };\n    const tmpPath = join(tmpdir(), (Date.now() + Math.random()).toString(36).padEnd(12, '0'));\n    try {\n        await rm(tmpPath, rmOptions);\n        await symlink(tmpPath + '.tmp', tmpPath, 'file');\n        return true;\n    } catch (e) {\n        return false;\n    } finally {\n        void rm(tmpPath, rmOptions);\n    }\n}\n\nasync function exec(entryList: (readonly [string, string])[], resultMap: Map<string, LinkInfo>, worker: Worker) {\n    while (0 < entryList.length) {\n        worker.postMessage(entryList.pop());\n        const [result] = await once(worker, 'message') as [LinkInfoInit];\n        resultMap.set(result.linkPath, new _LinkInfo(result));\n    }\n}\n\nfunction listEntries(srcEntries: Readonly<Record<string, string>>) {\n    const srcList = Object.entries(srcEntries);\n    const entryMap = new Map<string, string>();\n    for (const [link, target] of srcList) {\n        const linkPath = resolve(link);\n        if (entryMap.has(linkPath)) {\n            const i = [...entryMap.keys()].indexOf(linkPath);\n            const [link0] = srcList[i]!;\n            throw new Error(`Duplicate Links: \"${link0}\" == \"${link}\"`);\n        }\n        entryMap.set(linkPath, target);\n    }\n    return entryMap;\n}\n"],"names":["gray","chalk","getWorkerUrl","importMetaResolve","isWindows","process","platform","symlinkAvailable","availableSymlink","cpuCount","cpus","length","execArgv","Object","freeze","workerPath","fileURLToPath","_LinkInfo","constructor","init","properties","getOwnPropertyDescriptors","values","forEach","p","writable","defineProperties","this","toStringTag","Symbol","isAnyLink","type","isDirLink","isFileLink","isHardLink","isJunction","isSoftLink","isSymLink","isSymlinkAvailable","async","mklnks","options","cwd","noSymlink","quiet","silent","baseDir","dryRun","entries","force","workers","chdir","entryMap","listEntries","size","console","log","n","Math","min","preferSymlink","workerData","workerOptions","i","Worker","entryList","resultMap","Map","map","linkPath","run","exec","bind","reverse","Promise","all","w","terminate","rmOptions","recursive","tmpPath","join","tmpdir","Date","now","random","toString","padEnd","rm","symlink","e","worker","postMessage","pop","result","once","set","srcEntries","srcList","link","target","resolve","has","keys","indexOf","link0","Error"],"mappings":"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"}