import{once as t}from"events";import{rm as e,symlink as r}from"fs/promises";import{cpus as n,tmpdir as o}from"os";import{join as s,resolve as i}from"path";import{fileURLToPath as c}from"url";import{Worker as a}from"worker_threads";import l from"chalk";import p from"#worker";const u=d();const{gray:f}=l;const m=n().length;const y=process.platform==="win32";const h=c(p);class g{constructor(t){const e=Object.getOwnPropertyDescriptors(t);Object.values(e).forEach((t=>t.writable=false));Object.defineProperties(this,e)}get[Symbol.toStringTag](){return"LinkInfo"}get isAnyLink(){return 0<this.type}get isDirLink(){return!!(this.type&1)}get isFileLink(){return!!(this.type&2)}get isHardLink(){return!!(this.type&16)}get isJunction(){return!!(this.type&8)}get isSoftLink(){return!!(this.type&12)}get isSymLink(){return!!(this.type&4)}}function w(){return u}async function k(t){const e=process.cwd();t={...t};t.noSymlink&&(t.noSymlink=y);t.quiet||(t.quiet=t.silent);const{baseDir:r=".",dryRun:n,entries:o={},force:s,noSymlink:i,quiet:c,silent:l}=t;const p=[];try{process.chdir(r);const t=S(o);const{size:y}=t;if(y<1){c||console.log(f("No valid entries."));return[]}{const t=p.length=Math.min(m,y);const e=!i&&await u;const r={dryRun:n,force:s,preferSymlink:e,quiet:c,silent:l};const o={execArgv:["--experimental-import-meta-resolve"],workerData:r};for(let e=0;e<t;p[e++]=new a(h,o));}const g=[...t];const w=new Map(g.map((([t])=>[t,null])));const k=v.bind(null,g.reverse(),w);await Promise.all(p.map(k));return[...w.values()]}finally{p.forEach((t=>void t.terminate()));process.chdir(e)}}async function d(){const t={force:true,recursive:true};const n=s(o(),Date.now().toString(36));try{await e(n,t);await r(n+".tmp",n,"file");return true}catch(t){return false}finally{void e(n,t)}}async function v(e,r,n){while(0<e.length){n.postMessage(e.pop());const[o]=await t(n,"message");r.set(o.linkPath,new g(o))}}function S(t){const e=Object.entries(t);const r=new Map;for(const[t,n]of e){const o=i(t);if(r.has(o)){const n=[...r.keys()].indexOf(o);const[s]=e[n];throw new Error(`Duplicate Links: "${s}" == "${t}"`)}r.set(o,n)}return r}export{w as isSymlinkAvailable,k as mklnks};
//# sourceMappingURL=main.mjs.map
