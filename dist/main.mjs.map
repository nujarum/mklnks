{"version":3,"file":"main.mjs","sources":["../src/main.ts"],"sourcesContent":["import type { RmOptions } from 'fs';\nimport type { WorkerOptions } from 'worker_threads';\n\nimport { once } from 'events';\nimport { rm, symlink } from 'fs/promises';\nimport { cpus, tmpdir } from 'os';\nimport { join, resolve } from 'path';\nimport { fileURLToPath } from 'url';\nimport { Worker } from 'worker_threads';\nimport chalk from 'chalk';\nimport workerURL from '#worker'; // await import.meta.resolve('#worker');\n\nconst _symlinkAvailable = availableSymlink();\nconst { gray } = chalk;\nconst cpuCount = cpus().length;\nconst isWindows = process.platform === 'win32';\nconst workerPath = fileURLToPath(workerURL);\n\n/** @internal */\nexport interface LinkInfoInit {\n    dryRun?: boolean;\n    linkPath: string;\n    targetPath: string;\n    type: LinkType;\n}\n\n/** @internal */\nexport const enum LinkType {\n    NONE            = 0b00000000,\n    DIR_LINK        = 0b00000001,\n    FILE_LINK       = 0b00000010,\n    SYMLINK         = 0b00000100,\n    JUNCTION        = 0b00001000,\n    SOFTLINK        = SYMLINK | JUNCTION,\n    HARDLINK        = 0b00010000,\n    SYMLINK_DIR     = SYMLINK | DIR_LINK,\n    SYMLINK_FILE    = SYMLINK | FILE_LINK,\n    JUNCTION_DIR    = JUNCTION | DIR_LINK,\n    HARDLINK_FILE   = HARDLINK | FILE_LINK,\n}\n\n/** @internal */\nexport interface WorkerData {\n    readonly dryRun?: boolean | undefined;\n    readonly force?: boolean | undefined;\n    readonly preferSymlink?: boolean | undefined;\n    readonly quiet?: boolean | undefined;\n    readonly silent?: boolean | undefined;\n}\n\nexport interface LinkInfo {\n    /** `true` if run with `Options.dryRun: true` */\n    readonly dryRun?: boolean;\n    /** `true` if any link has created. `false` if otherwise (e.g. `targetPath` & `linkPath` refer to same location). */\n    readonly isAnyLink: boolean;\n    /** `true` if the link created is directory link. */\n    readonly isDirLink: boolean;\n    /** `true` if the link created is file link. */\n    readonly isFileLink: boolean;\n    /** `true` if the link created is hard-link. */\n    readonly isHardLink: boolean;\n    /** `true` if the link created is junction. */\n    readonly isJunction: boolean;\n    /** `true` if the link created is soft-link (junction or symbolic link). */\n    readonly isSoftLink: boolean;\n    /** `true` if the link created is symbolic link. */\n    readonly isSymLink: boolean;\n    /** The path of link source. */\n    readonly linkPath: string;\n    /** The path of link tareget. */\n    readonly targetPath: string;\n}\n\nexport interface Options {\n    /**\n     * Base path for resolving paths.\n     * @default '.' (== process.cwd())\n     */\n    baseDir?: string;\n    /**\n     * Run trial execution without actual link creation.\n     * @default false\n     */\n    dryRun?: boolean;\n    /**\n     * An object mapping link path to target path.\n     *\n     * Supported link formats:\n     * * absolute/relative path\n     *\n     * Supported target formats:\n     * * absolute/relative path\n     * * `import:<id>` (resolve by [`import.meta.resolve`](https://nodejs.org/dist/latest-v16.x/docs/api/esm.html#esm_import_meta_resolve_specifier_parent))\n     * * `require:<id>` (resolve by [`require.resolve`](https://nodejs.org/dist/latest-v16.x/docs/api/modules.html#modules_require_resolve_request_options))\n     */\n    entries: Record</* link */ string, /* target */ string>;\n    /**\n     * Force to remove existing files/directories in the link path.\n     * @default false\n     */\n    force?: boolean;\n    /**\n     * (**On Windows only**) Create links with junctions/hard-links instead of symbolic links.\n     * @default false\n     */\n    noSymlink?: boolean;\n    /**\n     * **Not** to display logs.\n     * @default silent\n     */\n    quiet?: boolean;\n    /**\n     * **Not** to display logs & warnings.\n     * @default false\n     */\n    silent?: boolean;\n}\n\nclass _LinkInfo implements LinkInfo {\n    constructor(init: LinkInfoInit) {\n        const properties: PropertyDescriptorMap = Object.getOwnPropertyDescriptors(init);\n        Object.values(properties).forEach(p => p.writable = false);\n        Object.defineProperties(this, properties);\n    }\n    get [Symbol.toStringTag]() { return 'LinkInfo' as const }\n    get isAnyLink()     { return LinkType.NONE < this.type; }\n    get isDirLink()     { return !!(this.type & LinkType.DIR_LINK); }\n    get isFileLink()    { return !!(this.type & LinkType.FILE_LINK); }\n    get isHardLink()    { return !!(this.type & LinkType.HARDLINK); }\n    get isJunction()    { return !!(this.type & LinkType.JUNCTION); }\n    get isSoftLink()    { return !!(this.type & LinkType.SOFTLINK); }\n    get isSymLink()     { return !!(this.type & LinkType.SYMLINK); }\n}\ninterface _LinkInfo extends Readonly<LinkInfoInit> { // eslint-disable-line @typescript-eslint/no-empty-interface\n}\n\nexport function isSymlinkAvailable() {\n    return _symlinkAvailable;\n}\n\nexport async function mklnks(options: Options) {\n    const cwd = process.cwd();\n    options = { ...options };\n    options.noSymlink &&= isWindows;\n    options.quiet     ||= options.silent!;\n    const {\n        baseDir = '.',\n        dryRun,\n        entries = {},\n        force,\n        noSymlink,\n        quiet,\n        silent,\n    } = options;\n\n    const workers: Worker[] = [];\n    try {\n        process.chdir(baseDir);\n\n        const entryMap = listEntries(entries);\n        const { size } = entryMap;\n        if (size < 1) {\n            quiet || console.log(gray('No valid entries.'));\n            return [];\n        }\n        {\n            const n = workers.length = Math.min(cpuCount, size);\n            const preferSymlink = !noSymlink && await _symlinkAvailable;\n            const workerData: WorkerData = { dryRun, force, preferSymlink, quiet, silent };\n            const workerOptions: WorkerOptions = {\n                execArgv: ['--experimental-import-meta-resolve'],\n                workerData,\n            };\n            for (let i = 0; i < n; workers[i++] = new Worker(workerPath, workerOptions));\n        }\n        const entryList: (readonly [string, string])[] = [...entryMap];\n        const resultMap = new Map(entryList.map(([linkPath]) => [linkPath, null! as LinkInfo]));\n        const run = exec.bind(null, entryList.reverse(), resultMap);\n\n        await Promise.all(workers.map(run));\n\n        return [...resultMap.values()];\n\n    } finally {\n        workers.forEach(w => void w.terminate());\n        process.chdir(cwd);\n    }\n}\n\nasync function availableSymlink() {\n    const rmOptions: RmOptions = { force: true, recursive: true };\n    const tmpPath = join(tmpdir(), Date.now().toString(36));\n    try {\n        await rm(tmpPath, rmOptions);\n        await symlink(tmpPath + '.tmp', tmpPath, 'file');\n        return true;\n    } catch (e) {\n        return false;\n    } finally {\n        void rm(tmpPath, rmOptions);\n    }\n}\n\nasync function exec(entryList: (readonly [string, string])[], resultMap: Map<string, LinkInfo>, worker: Worker) {\n    while (0 < entryList.length) {\n        worker.postMessage(entryList.pop());\n        const [result] = await once(worker, 'message') as [LinkInfoInit];\n        resultMap.set(result.linkPath, new _LinkInfo(result));\n    }\n}\n\nfunction listEntries(srcEntries: Readonly<Record<string, string>>) {\n    const srcList = Object.entries(srcEntries);\n    const entryMap = new Map<string, string>();\n    for (const [link, target] of srcList) {\n        const linkPath = resolve(link);\n        if (entryMap.has(linkPath)) {\n            const i = [...entryMap.keys()].indexOf(linkPath);\n            const [link0] = srcList[i]!;\n            throw new Error(`Duplicate Links: \"${link0}\" == \"${link}\"`);\n        }\n        entryMap.set(linkPath, target);\n    }\n    return entryMap;\n}\n"],"names":["_symlinkAvailable","availableSymlink","gray","chalk","cpuCount","cpus","length","isWindows","process","platform","workerPath","fileURLToPath","workerURL","_LinkInfo","constructor","init","properties","Object","getOwnPropertyDescriptors","values","forEach","p","writable","defineProperties","this","toStringTag","Symbol","isAnyLink","type","isDirLink","isFileLink","isHardLink","isJunction","isSoftLink","isSymLink","isSymlinkAvailable","async","mklnks","options","cwd","noSymlink","quiet","silent","baseDir","dryRun","entries","force","workers","chdir","entryMap","listEntries","size","console","log","n","Math","min","preferSymlink","workerData","workerOptions","execArgv","i","Worker","entryList","resultMap","Map","map","linkPath","run","exec","bind","reverse","Promise","all","w","terminate","rmOptions","recursive","tmpPath","join","tmpdir","Date","now","toString","rm","symlink","e","worker","postMessage","pop","result","once","set","srcEntries","srcList","link","target","resolve","has","keys","indexOf","link0","Error"],"mappings":"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"}