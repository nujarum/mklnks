import{lstat as e,stat as t,mkdir as r,rm as o,unlink as s,link as n,symlink as c,appendFile as i}from"fs/promises";import{createRequire as a}from"module";import{sep as l,dirname as f,relative as u,resolve as p}from"path";import{pathToFileURL as m,fileURLToPath as w}from"url";import{workerData as h,parentPort as y}from"worker_threads";import k from"chalk";const{blue:d,cyan:g,gray:b,green:E,magenta:v,white:P,yellow:j}=k;const{dryRun:x,force:S,preferSymlink:T,quiet:q,silent:z}={...h};const I=E(x?"? ":"+ ");const L=b(" Â» ");const O=Object.freeze({recursive:true});const R=Object.freeze({force:true,recursive:true});y?.on("message",(async e=>{const[t,r]=e;const o=await $(t,r);y.postMessage(o)}));const W=import.meta.url;async function $(i,a){if(!i||!a){throw new TypeError("Invalid Arguments")}const l=await U(a);const p={dryRun:x,linkPath:i,targetPath:l};if(i===l){z||console.warn(j("Link & Target refer to same location:",_(i)));p.type=0;return p}const m=[e(i).catch(A),t(l).catch(A)];const w=/[/\\]$/.test(a);const h=f(i);const y=[];const k=_(i);const b=_(l);const[E,W]=await Promise.all(m);const $=W?.isDirectory()??w;if(T){p.type=$?5:6}else if($){p.type=9}else{if(!W){x||y.push(X(l));z||console.warn(j("Create empty hardlink target:",b))}p.type=18}if(x);else if(!E){y.push(r(h,O))}else if(S){y.push(o(i,R))}else if(E.isSymbolicLink()||1<E.nlink){y.push(s(i))}else{throw new Error(`EEXIST: ${k}`)}const C=u(h,l);let D;let M;await Promise.all(y);switch(p.type){case 5:D=x||c(C,i,"dir");M=I+g(k)+L+d(b)+"/";break;case 6:D=x||c(C,i,"file");M=I+g(k)+L+P(b);break;case 9:D=x||c(l,i,"junction");M=I+v(k)+L+d(b)+"/";break;case 18:D=x||n(l,i);M=I+j(k)+L+P(b);break;default:throw new Error("Unexpected Exception")}await D;q||console.log(M);return p}function A(){}const C=process.cwd()+l;const D=m(C).href;const M=a(C);async function U(e){if(e.startsWith("import:")){const t=e.slice(7);const r=await import.meta.resolve(t,D);return w(r)}else if(e.startsWith("require:")){const t=e.slice(8);return M.resolve(t)}else{return p(e)}}async function X(e){await r(f(e),O);await i(e,"")}function _(e,t="."){e=u(t,e);return l==="\\"?e.replace(/\\/g,"/"):e}export{W as default};
//# sourceMappingURL=worker.mjs.map
