import{lstat as e,stat as t,mkdir as r,rm as o,unlink as s,link as n,symlink as c,appendFile as i}from"fs/promises";import{createRequire as a}from"module";import{sep as l,dirname as f,relative as u,resolve as p}from"path";import{pathToFileURL as m,fileURLToPath as h}from"url";import{workerData as w,parentPort as y}from"worker_threads";import d from"chalk";const{blue:k,cyan:g,gray:b,green:E,magenta:v,white:P,yellow:j}=d;const{dryRun:x,force:S,preferSymlink:T,quiet:W,silent:q}={...w};const z=E(x?"? ":"+ ");const I=b(" Â» ");const L=Object.freeze({recursive:true});const O=Object.freeze({force:true,recursive:true});y?.on("message",(async e=>{const[t,r]=e;const o=await A(t,r);y.postMessage(o)}));const R=import.meta.url;async function A(i,a){if(!i||!a){throw new TypeError("Invalid Arguments")}const l=await X(a);const p={dryRun:x,linkPath:i,targetPath:l};if(i===l){q||console.warn(j("Link & Target refer to same location:",_(i)));p.type=0;return p}const m=[e(i).catch(C),t(l).catch(C)];const h=a.endsWith("/");const w=f(i);const y=[];const d=_(i);const b=_(l);const[E,R]=await Promise.all(m);const A=R?.isDirectory()??h;if(T){p.type=A?5:6}else if(A){p.type=9}else{if(!R){x||y.push($(l));q||console.warn(j("Create empty hardlink target:",b))}p.type=18}if(x);else if(!E){y.push(r(w,L))}else if(S){y.push(o(i,O))}else if(E.isSymbolicLink()||1<E.nlink){y.push(s(i))}else{throw new Error(`EEXIST: ${d}`)}const D=u(w,l);let M;let U;await Promise.all(y);switch(p.type){case 5:M=x||c(D,i,"dir");U=z+g(d)+I+k(b)+"/";break;case 6:M=x||c(D,i,"file");U=z+g(d)+I+P(b);break;case 9:M=x||c(l,i,"junction");U=z+v(d)+I+k(b)+"/";break;case 18:M=x||n(l,i);U=z+j(d)+I+P(b);break;default:throw new Error("Unexpected Exception")}await M;W||console.log(U);return p}function C(){}const D=process.cwd()+"/";const M=m(D).href;const U=a(D);async function X(e){if(e.startsWith("import:")){const t=e.slice(7);const r=await import.meta.resolve(t,M);return h(r)}else if(e.startsWith("require:")){const t=e.slice(8);return U.resolve(t)}else{return p(e)}}async function $(e){await r(f(e),L);await i(e,"")}function _(e,t="."){e=u(t,e);return l==="\\"?e.replace(/\\/g,"/"):e}export{R as default};
//# sourceMappingURL=worker.mjs.map
