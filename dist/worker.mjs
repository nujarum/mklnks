import{lstat as e,stat as t,mkdir as r,rm as o,unlink as n,link as s,symlink as c,appendFile as i}from"node:fs/promises";import{createRequire as a}from"node:module";import{dirname as l,relative as f,sep as u,resolve as p}from"node:path";import{pathToFileURL as m,fileURLToPath as w}from"node:url";import{parentPort as h,workerData as y}from"node:worker_threads";import d from"chalk";const{blue:k,cyan:g,gray:b,green:E,magenta:v,white:P,yellow:j}=d;const{dryRun:S,force:T,preferSymlink:q,quiet:x,silent:z}=y;const I=E(S?"? ":"+ ");const L=b(" Â» ");const O=Object.freeze({recursive:true});const R=Object.freeze({force:true,recursive:true});h?.on("message",(async e=>{const[t,r]=e;const o=await W(t,r);h.postMessage(o)}));async function W(i,a){if(!i||!a){throw new TypeError("Invalid Arguments")}const u=await M(a);const p={dryRun:S,linkPath:i,targetPath:u};if(i===u){z||console.warn(j("Link & Target refer to same location:",X(i)));p.type=0;return p}const m=[e(i).catch($),t(u).catch($)];const w=/[/\\]$/.test(a);const h=l(i);const y=[];const d=X(i);const b=X(u);const[E,W]=await Promise.all(m);const A=W?.isDirectory()??w;if(q){p.type=A?5:6}else if(A){p.type=9}else{if(!W){S||y.push(U(u));z||console.warn(j("Create empty hardlink target:",b))}p.type=18}if(S);else if(!E){y.push(r(h,O))}else if(T){y.push(o(i,R))}else if(E.isSymbolicLink()||1<E.nlink){y.push(n(i))}else{throw new Error(`EEXIST: ${d}`)}const C=f(h,u);let D;let _;await Promise.all(y);switch(p.type){case 5:D=S||c(C,i,"dir");_=I+g(d)+L+k(b)+"/";break;case 6:D=S||c(C,i,"file");_=I+g(d)+L+P(b);break;case 9:D=S||c(u,i,"junction");_=I+v(d)+L+k(b)+"/";break;case 18:D=S||s(u,i);_=I+j(d)+L+P(b);break;default:throw new Error("Unexpected Exception")}await D;x||console.log(_);return p}function $(){}const A=process.cwd()+u;const C=m(A).href;const D=a(A);async function M(e){if(e.startsWith("import:")){const t=e.slice(7);const r=await import.meta.resolve(t,C);return w(r)}else if(e.startsWith("require:")){const t=e.slice(8);return D.resolve(t)}else{return p(e)}}async function U(e){await r(l(e),O);await i(e,"")}function X(e,t="."){e=f(t,e);return u==="\\"?e.replace(/\\/g,"/"):e}
//# sourceMappingURL=worker.mjs.map
