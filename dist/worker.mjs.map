{"version":3,"file":"worker.mjs","sources":["../src/worker.ts"],"sourcesContent":["import type { MakeDirectoryOptions, RmOptions, Stats } from 'fs';\nimport { LinkInfoInit, LinkType, WorkerData } from '#main';\n\nimport { appendFile, link as hardlink, lstat, mkdir, rm, stat, symlink, unlink } from 'fs/promises';\nimport { createRequire } from 'module';\nimport { dirname, relative, resolve, sep } from 'path';\nimport { fileURLToPath, pathToFileURL } from 'url';\nimport { parentPort, workerData } from 'worker_threads';\nimport chalk from 'chalk';\n\nconst { blue, cyan, gray, green, magenta, white, yellow } = chalk;\nconst { dryRun, force, preferSymlink, quiet, silent } = { ...workerData } as WorkerData;\n\nconst STR_PREFIX = green(dryRun ? '? ' : '+ ');\nconst STR_ARROW = gray(' Â» ');\n\nconst mkdirOptions = Object.freeze({ recursive: true } as MakeDirectoryOptions);\nconst rmOptions = Object.freeze({ force: true, recursive: true } as RmOptions);\n\nparentPort?.on('message', async (message: readonly [string, string]) => {\n    const [linkPath, target] = message;\n    const result = await mklnk(linkPath, target);\n    parentPort!.postMessage(result);\n});\n\nexport default import.meta.url;\n\nasync function mklnk(linkPath: string, target: string) {\n\n    if (!linkPath || !target) {\n        throw new TypeError('Invalid Arguments');\n    }\n\n    const targetPath = await parseTarget(target);\n    const result = { dryRun, linkPath, targetPath } as LinkInfoInit;\n\n    if (linkPath === targetPath) {\n        silent || console.warn(yellow('Link & Target refer to same location:', toPOSIX(linkPath)));\n        result.type = LinkType.NONE;\n        return result;\n    }\n\n    const getStats = [\n        lstat(linkPath).catch(noop),\n        stat(targetPath).catch(noop),\n    ] as Promise<Stats | undefined>[];\n\n    const definitelyDir = /[/\\\\]$/.test(target);\n    const linkParentDirPath = dirname(linkPath);\n    const preparations = [] as Promise<unknown>[];\n    const strLink = toPOSIX(linkPath);\n    const strTarget = toPOSIX(targetPath);\n\n    const [linkStat, targetStat] = await Promise.all(getStats);\n    const isDir = targetStat?.isDirectory() ?? definitelyDir;\n\n    if (preferSymlink) {\n        result.type = isDir ? LinkType.SYMLINK_DIR : LinkType.SYMLINK_FILE;\n    } else if (isDir) {\n        result.type = LinkType.JUNCTION_DIR;\n    } else {\n        if (!targetStat) {\n            dryRun || preparations.push(safeTouch(targetPath));\n            silent || console.warn(yellow('Create empty hardlink target:', strTarget));\n        }\n        result.type = LinkType.HARDLINK_FILE;\n    }\n\n    if (dryRun) {\n        // NOOP\n    } else if (!linkStat) {\n        preparations.push(mkdir(linkParentDirPath, mkdirOptions));\n    } else if (force) {\n        preparations.push(rm(linkPath, rmOptions));\n    } else if (linkStat.isSymbolicLink() || 1 < linkStat.nlink) {\n        preparations.push(unlink(linkPath));\n    } else {\n        throw new Error(`EEXIST: ${strLink}`);\n    }\n\n    const relativePath = relative(linkParentDirPath, targetPath);\n    let createLink: true | Promise<void>;\n    let logText: string;\n\n    await Promise.all(preparations);\n\n    switch (result.type) {\n        case LinkType.SYMLINK_DIR:\n            createLink = dryRun || symlink(relativePath, linkPath, 'dir');\n            logText = STR_PREFIX + cyan(strLink) + STR_ARROW + blue(strTarget) + '/';\n            break;\n        case LinkType.SYMLINK_FILE:\n            createLink = dryRun || symlink(relativePath, linkPath, 'file');\n            logText = STR_PREFIX + cyan(strLink) + STR_ARROW + white(strTarget);\n            break;\n        case LinkType.JUNCTION_DIR:\n            createLink = dryRun || symlink(targetPath, linkPath, 'junction');\n            logText = STR_PREFIX + magenta(strLink) + STR_ARROW + blue(strTarget) + '/';\n            break;\n        case LinkType.HARDLINK_FILE:\n            createLink = dryRun || hardlink(targetPath, linkPath);\n            logText = STR_PREFIX + yellow(strLink) + STR_ARROW + white(strTarget);\n            break;\n        default:\n            throw new Error('Unexpected Exception');\n    }\n\n    await createLink;\n    quiet || console.log(logText);\n\n    return result;\n}\n\nfunction noop() { /* NOOP */ }\n\nconst cwd = process.cwd() + sep;\nconst cwdUrl = pathToFileURL(cwd).href;\nconst require = createRequire(cwd);\n\nasync function parseTarget(s: string) {\n    const enum Prefix {\n        IMPORT  = 'import:',\n        REQUIRE = 'require:',\n    }\n    const enum PrefixLength {\n        IMPORT  = 7,    // Prefix.IMPORT.length\n        REQUIRE = 8,    // Prefix.REQUIRE.length\n    }\n    if (s.startsWith(Prefix.IMPORT)) {\n        const id = s.slice(PrefixLength.IMPORT);\n        const url = await import.meta.resolve!(id, cwdUrl);\n        return fileURLToPath(url);\n    } else if (s.startsWith(Prefix.REQUIRE)) {\n        const id = s.slice(PrefixLength.REQUIRE);\n        return require.resolve(id);\n    } else {\n        return resolve(s);\n    }\n}\n\nasync function safeTouch(path: string) {\n    await mkdir(dirname(path), mkdirOptions);\n    await appendFile(path, '');\n}\n\nfunction toPOSIX(path: string, from = '.') {\n    path = relative(from, path);\n    return sep === '\\\\' ? path.replace(/\\\\/g, '/') : path;\n}\n"],"names":["blue","cyan","gray","green","magenta","white","yellow","chalk","dryRun","force","preferSymlink","quiet","silent","workerData","STR_PREFIX","STR_ARROW","mkdirOptions","Object","freeze","recursive","rmOptions","parentPort","on","async","message","linkPath","target","result","mklnk","postMessage","import","meta","url","TypeError","targetPath","parseTarget","console","warn","toPOSIX","type","getStats","lstat","catch","noop","stat","definitelyDir","test","linkParentDirPath","dirname","preparations","strLink","strTarget","linkStat","targetStat","Promise","all","isDir","isDirectory","push","safeTouch","mkdir","rm","isSymbolicLink","nlink","unlink","Error","relativePath","relative","createLink","logText","symlink","hardlink","log","cwd","process","sep","cwdUrl","pathToFileURL","href","require","createRequire","s","startsWith","id","slice","resolve","fileURLToPath","path","appendFile","from","replace"],"mappings":"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"}